from typing import Union, Tuple
import pandas as pd
import pathlib
import numpy as np
import re
from matplotlib import pyplot as plt

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """
    
    def __init__(self, data_fname: Union[pathlib.Path, str]):
        # ...
        if not isinstance(data_fname, pathlib.Path):
            self.data_fname = pathlib.Path(data_fname)
        else:
            self.data_fname = data_fname

        if not self.data_fname.exists():
            raise ValueError
        self.data = pd.DataFrame()
        # read_data()
        

    def read_data(self):
        """
        Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        # ...
        self.data = pd.read_json(str(self.data_fname))
        return
    
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """
        Calculates and plots the age distribution of the participants.
        Returns a tuple containing two numpy arrays:
        The first item being the number of people in a given bin.
        The second item being the bin edges.
        """
        bin_edges = np.array([i*10 for i in range(11)])
        age_series = self.data.age.dropna()
        
        # compute number of people in each bin
        people_in_each_bin = [0 for i in range(10)]
        for age in age_series:
            bin = int(age // 10)
            people_in_each_bin[bin] += 1

        # plot histogram
        age_series.hist(bins=bin_edges)
        # TODO: comment-out the next row so that test won't stop
        plt.show()
        return np.array(people_in_each_bin), bin_edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """
        Checks self.data for rows with invalid emails, and removes them.
        Returns the corrected DataFrame, i.e. the same table but with
        the erroneous rows removed and the (ordinal) index after a reset.
        """
        df = self.data
        ret = df.loc[df['email'].apply(lambda x:self.validate_email(x))]
        ret.reset_index(inplace=True, drop=True)
        return ret

    def validate_email(self, email):
        # filter any email not of the form "*@*.*"
        email_regex = re.compile(r"[^@]+@[^@]+\.[^@]+")
        if email_regex.match(email):
            return True
        return False

    def fill_na_with_mean(self) -> Union[pd.DataFrame, np.ndarray]:
        """
        Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student. Returns the corrected DataFrame,
        as well as the row indices of the students that their new grades
        were generated.
        """
        df = self.data

        # compute NaN indices
        questions_df = df[['q1', 'q2', 'q3', 'q4', 'q5']]
        df_nan = questions_df.isna()
        df_nan_series =df_nan.any(axis=1) 
        rows_with_na = np.where(df_nan_series)[0]
        
        # fill in NaN values
        df[['q1', 'q2', 'q3', 'q4', 'q5']] = df[['q1', 'q2', 'q3', 'q4', 'q5']].apply(lambda row: row.fillna(row.mean()), axis=1)

        return df, rows_with_na

    def correlate_gender_age(self) -> pd.DataFrame:

        idx = self.data.set_index([self.data.index, 'age', 'gender'])
        idx_g = idx.loc[:,'q1' : 'q5']
        idx_g['40_plus'] = idx_g.index.get_level_values(1)>40
        return idx_g.groupby(['gender', '40_plus']).mean()

if __name__ == "__main__":
    filename = pathlib.Path("C:/Users/Nofar/Desktop/python/hw5/hw5_2019/data.json")
    qa = QuestionnaireAnalysis(filename)
    qa.read_data()

    qa.show_age_distrib()

    qa.fill_na_with_mean()

    df = qa.remove_rows_without_mail()

    qa.correlate_gender_age()
    print(df.email)
